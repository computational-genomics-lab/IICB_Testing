from django.http import JsonResponse
from django.core import serializers
import os
import array
import json
from . import DBUtils

#new helper functions defined

def _createclean2Darry(results):
    '''
    undef @ features;
    while (my @ arry = $sth->fetchrow_array())
        my @ temp;

        foreach my $line( @ arry)
            if (defined  $line)
                push @ temp, $line;
            else
                push @ temp, -1;  # set to -1 when any element is missing
        push @ features, [ @ temp];
    '''
    features = []
    for arry in results:
        temp = []
        for line in arry:
            if line is not None:
                temp.append(line)
            else:
                temp.append(-1)
        # end of for line in arry:
        features.append(temp)
    # end for arry in results:
    return features

#end new helper functions defined

def getACname():
    #NOT CALLED
    return None

def _getLen(organism, scaffold, version):
    retlen = 0
    #my $sql = "select * from externalnasequence where taxon_ID=$organism and source_ID='$scaffold' and sequence_type_ID=1 and sequence_version='$version'";
    sql = "select * from externalnasequence where taxon_ID="\
          +str(organism) + " and source_ID='" + str(scaffold) + "' and sequence_type_ID=1 "\
          "and sequence_version='" + str(version) + "'";

    db = DBUtils.MariaConnection('DOTS')
    results = DBUtils.MariaGetData(db, sql)
    DBUtils.MariaClose(db)
    #print(results)

    #while (my @ arry = $sth->fetchrow_array())
    #   $len =$arry[9];
    if len(results) > 0:
        retlen = results[0][9]

    return retlen;

def getcommonfeature():
    #NOT CALLED
    return None

def _getfeatures(organism, scaffold, version, startbase, stopbase):
    jsonret = {'status':-1}
    db = DBUtils.MariaConnection('DOTS')
    '''
    my $qryExonPlot="SELECT nl.na_location_id, nl.start_min, nl.end_min, nl.is_reversed, nl.loc_order, tran.na_feature_id, en.length, tran.string4, en.na_sequence_id, nl.is_excluded,tran.review_status_ID
    FROM externalnasequence en, nalocation nl, nafeatureimp tran
    WHERE en.taxon_id =$organism
    AND en.sequence_version =$version
    and en.source_ID='$scaffold'
    AND en.na_sequence_id = tran.na_sequence_id
    AND nl.na_feature_id = tran.na_feature_id
    and ((nl.start_min between $startbase and $stopbase) or (nl.end_min between $startbase and $stopbase) or ($stopbase between nl.start_min and nl.end_min))
    AND tran.name =  'gene'
    ORDER BY nl.start_min";
    '''
    qryExonPlot = "SELECT nl.na_location_id, nl.start_min, nl.end_min, nl.is_reversed, nl.loc_order, tran.na_feature_id, en.length, tran.string4, en.na_sequence_id, nl.is_excluded,tran.review_status_ID FROM externalnasequence en, nalocation nl, nafeatureimp tran " \
        + " WHERE en.taxon_id = " + str(organism) \
        + " AND en.sequence_version =" + str(version) \
        + " and en.source_ID='" + str(scaffold) + "'"\
        + " AND en.na_sequence_id = tran.na_sequence_id AND nl.na_feature_id = tran.na_feature_id " \
        + " and ((nl.start_min between " + str(startbase) + " and " + str (stopbase) + ")" \
        + " or (nl.end_min between " + str(startbase) + " and " + str(stopbase) +")" \
        + " or (" + str(stopbase) + " between nl.start_min and nl.end_min))" \
        + " AND tran.name =  'gene'" \
        + " ORDER BY nl.start_min"
    print(qryExonPlot)
    results = DBUtils.MariaGetData(db, qryExonPlot)
    DBUtils.MariaClose(db)

    '''
    undef @ features;
    while (my @ arry = $sth->fetchrow_array())
        my @ temp;

        foreach my $line( @ arry)
            if (defined  $line)
                push @ temp, $line;
            else
                push @ temp, -1;  # set to -1 when any element is missing
        push @ features, [ @ temp];
    '''
    features = _createclean2Darry(results)

    jsonret['features'] = features
    jsonret['status'] = 4
    return jsonret


def _getScaffold(organism, scaffold, version):
    jsonret = {'status':-1}
    '''
    my $qryExonPlot = "select sequence ,na_sequence_id
        from externalnasequence where
        taxon_id =$organism
        and source_id = '$scaffold'
        and sequence_type_id = 1
        and sequence_version = '$version'";
    my $sth = $dbh->prepare($qryExonPlot);
    $sth->execute | | die "error in executing query";
    '''
    db = DBUtils.MariaConnection('DOTS')
    qryExonPlot = "select sequence ,na_sequence_id from externalnasequence where " \
                " taxon_id = " + str(organism) + \
                " and source_id = '" + str(scaffold) + "'" + \
                " and sequence_type_id = 1" +\
                " and sequence_version = '" + str(version) + "'"
    results = DBUtils.MariaGetData(db, qryExonPlot)
    DBUtils.MariaClose(db)

    '''
    undef @ features;
    while (my @ arry = $sth->fetchrow_array())
        my @ temp;
        foreach my $line( @ arry)
            if (defined  $line)
                push @ temp, $line;
            else
                push @ temp, -1;  # set to -1 when any element is missing         
    
        push @ features, [ @ temp];

    return @features;
    '''
    features = _createclean2Darry(results)
    jsonret['features'] = features
    jsonret['status'] = 5
    return jsonret

# Not called from anywhere
def getnewfeatures():
    #NOT CALLED
    return None

# Not called from anywhere
def get_exon_info():
    #NOT CALLED
    return None


def _trp_info(id, organism, scaffold, version):
    jsonret = {'status': -1}
    '''

    my $dbh = DBI->connect($Defaults::db_ConnString1,$Defaults::db_UserName, $Defaults::db_Password, { RaiseError => 1, AutoCommit => 0}) || die "Error connecting to server";
            my $sql;
            if($id==1)
            {
    '''
    db = DBUtils.MariaConnection('DOTS')
    sql = "select nl.na_location_id,nl.start_min,nl.end_min,nl.is_reversed,nl.loc_order,nf.na_feature_id,"+\
          " en.length,en.na_sequence_id,nl.is_excluded,nf.subclass_view,en.taxon_id,nf.string18"+\
          " from externalnasequence en,nalocation nl ,nafeatureimp nf"+\
          " where en.source_ID='" + str(scaffold)+ \
          "' and en.taxon_id =" + str(organism)+\
          " and en.sequence_version="+str(version)+\
          " and nf.na_sequence_id=en.na_sequence_id"+\
          " and( nf.subclass_view like '%tRNA%'"+\
          " or nf.subclass_view like '%REPEAT%'"+\
          " or nf.subclass_view like '%promoter%' "+\
          " or nf.subclass_view like '%Transposon%')" +\
          " and nl.na_feature_id =nf.na_feature_id"+\
          " order by nl.start_min"

    results = DBUtils.MariaGetData(db, sql)
    DBUtils.MariaClose(db)
    '''       
    #print "$sql\n";
        $dbh->{'LongReadLen'} = $Defaults::db_MaxFetchSize;
        $dbh->{'LongTruncOk'} = $Defaults::db_TruncateOnLong;

        my $sth = $dbh->prepare($sql);

        $sth->execute || die "error in executing query";
        undef %trp1;
        while ( my @arry = $sth->fetchrow_array())
        {
                my @temp;

                foreach my $line (@arry)
                {
                        if ( defined  $line )
                        {
                                push @temp, $line;
                        }
                        else
                        {
                                push @temp, -1;   # set to -1 when any element is missing
                        }
                }
                #print "$temp[5] <br>";
                push @features, [ @temp ];

                push(@{$trp1{$temp[9]}},[ @temp ]);


        }
        $sth->finish;
        $dbh->disconnect;
        return %trp1;
    '''
    features = _createclean2Darry(results)
    trpl = {}

    for temp in features:
        # Adds temp array to the key 'temp[8]' in dict synenty
        trpl[str(temp[9])] = temp
    jsonret['trpl'] = trpl
    jsonret['status'] = 6
    return jsonret


def _get_synteny_info(id, na_sequence_id, taxon, startbase, stopbase):
    jsonret = {'status': -1}
    '''
    my $dbh = DBI->connect($Defaults::db_ConnString1,$Defaults::db_UserName, 
              $Defaults::db_Password, { RaiseError => 1, AutoCommit => 0}) || die "Error connecting to server";
    
    
    '''
    db = DBUtils.MariaConnection('DOTS')
    '''
    "SELECT org.species, sa.query_start, sa.query_end, sa.is_reversed, sa.target_na_sequence_id, sa.query_taxon_id, sa.target_taxon_id, ena.source_id, sa.q_version,org.strain,sa.target_start,sa.target_end,sa.score,sa.evalue FROM externalnasequence ena, samalignment sa,oomycetes_cgl_sres.organism org WHERE sa.target_na_sequence_id =$na_sequence_id and sa.query_taxon_id !=$taxon AND sa.query_na_sequence_id = ena.na_sequence_id and org.taxon_id=sa.query_taxon_id and org.version=ena.sequence_version
     and ((sa.target_start between $startbase and $stopbase) or (sa.target_end between $startbase and $stopbase) or 
     ($stopbase between sa.target_start and sa.target_end)) ORDER BY sa.target_start"
    '''
    sql = "SELECT org.species, sa.query_start, sa.query_end, sa.is_reversed, sa.target_na_sequence_id, " + \
          " sa.query_taxon_id, sa.target_taxon_id, ena.source_id, sa.q_version,org.strain,sa.target_start," + \
          " sa.target_end,sa.score,sa.evalue " + \
          " FROM externalnasequence ena, samalignment sa," + \
          " oomycetes_cgl_sres.organism org WHERE " + \
          " sa.target_na_sequence_id =" + str(na_sequence_id) + " and " + \
          " sa.query_taxon_id != " + str(taxon) + " AND " + \
          " sa.query_na_sequence_id = ena.na_sequence_id " + \
          " and org.taxon_id=sa.query_taxon_id " + \
          " and org.version=ena.sequence_version " + \
          " and ((sa.target_start between "+str(startbase)+" and " + str(stopbase)+")" + \
          " or (sa.target_end between "+str(startbase)+" and " + str(stopbase)+")" + \
          " or (" + str(stopbase) + " between sa.target_start and sa.target_end)) ORDER BY sa.target_start"

    #TODO: commented next line only for testing
    results = [[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]
    #results = DBUtils.MariaGetData(db, sql)
    DBUtils.MariaClose(db)

    features = _createclean2Darry(results)

    # push( @ {$synteny{$temp[5]}->{$temp[7]}}, [ @ temp]);
    synteny = {}

    for temp in features:
        # Adds temp array to dict synenty, (to represent sparse 2D array)
        synteny[str(temp[5])+"_"+str(temp[7])] = temp
    jsonret['synteny'] = synteny
    jsonret['status'] = 8
    return jsonret


def _get_est(id, na_sequence_id):
    # oomycetes_cgl_dots
    jsonret = {'status': -1}

    features = []
    synenty = {}

    if id == 1:
        db = DBUtils.MariaConnection('DOTS')
        sql_query = "select distinct ena.name, ba.number_of_spans, ba.target_start, " \
                    "ba.is_reversed, ba.blat_alignment_quality_id, ba.blocksizes," \
                    "ba.tstarts,ena.sequence,ba.query_taxon_id,ena.sequence_version," \
                    "ba.target_taxon_id,org.species from externalnasequence ena, " \
                    "blatalignment ba,oomycetes_cgl_sres.organism org where ba.target_na_sequence_id="
        sql_query = sql_query + "1" + " and ba.query_na_sequence_id=ena.na_sequence_id " \
                                      "and org.taxon_id=ba.query_taxon_id " \
                                      "order by ba.target_start"
        #   TODO: replace "1" by str(na_sequence_id) in prev line
        print(sql_query)
        est_list = DBUtils.MariaGetData(db, sql_query)
        DBUtils.MariaClose(db)

        #while (my @ arry = $sth->fetchrow_array())
        #   my @ temp;
        #   foreach my $line( @ arry)
        #       if (defined  $line)
        #           push @ temp, $line;
        #       else
        #           push @ temp, -1;  # set to -1 when any element is missing
        #   print "$temp[5] <br>";
        #   push @ features, [ @ temp];
        #   push( @ {$synteny{$temp[8]}}, [ @ temp]);
        features = _createclean2Darry(est_list)
        for temp in features:
            # Adds temp array to the key 'temp[8]' in dict synenty
            synenty[str(temp[8])] = temp

        jsonret['est_list'] = est_list
        jsonret['synenty'] = synenty
        jsonret['status'] = 10
        return jsonret
    return jsonret

#start drawing functions
def _TPRTrack(startbase, stopbase, organism, version, trp, otherlink, contig_count):
    # drawing function
    jsonret = {'contig_count':333,
               'status': 9}
    return jsonret

# These are drawing functions
def _SyntenyTracks(startbase, stopbase, synteny, syntenylink, scaffold, contig_count):
    jsonret = {'contig_count':333,
               'status': 9}
    return jsonret




def _EstTracks(startbase, jsondata, config, estlink, field1, contig_count, synteny_end):
    #field1 unused
    jsonret = {'status': 11}
    jsonret['contig_count'] = 444
    return jsonret




def gff_track():
    #NOT CALLED
    return None

def plot_gene():
    #NOT CALLED
    return None


def get_tab():
    #NOT CALLED
    return None


def get_tab():
    # Not required
    #NOT CALLED
    return None
